apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'android-apt'

buildscript {
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}

android {

    compileSdkVersion currentCompileSdkVersion
    buildToolsVersion currentBuildToolsVersion

    defaultConfig {
        versionCode 1
        versionName "1.0.0-SNAPSHOT"
        applicationId "com.ndipatri.roboButton"
        minSdkVersion currentMinSdkVersion
        targetSdkVersion currentTargetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            testCoverageEnabled = true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
        debug {
            minifyEnabled false
            testCoverageEnabled = true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
    }

    sourceSets {
        test {
            java {
                srcDirs += ['build/generated/source/r/emulator/debug']
            }
        }
    }

    dexOptions {
        jumboMode = true
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
        emulator {
        }
        live {
        }
    }

}

jacoco {
    toolVersion "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}
def coverageSourceDirs = [
        './src/main/java'
]

task generateJacocoTestReports(type:JacocoReport, dependsOn: "assembleDebug") {
    group = "Reporting"
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = "${buildDir}/jacocoHtml"
    }
    description = "Generate Jacoco Robolectric unit test coverage reports"
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**//*R.class',
                       '**//*R$*.class',
                       '***/*//*$ViewInjector*.*',
                       '**//*BuildConfig.*',
                       '**//*Manifest*.*']
    )
    sourceDirectories = files(coverageSourceDirs)
    additionalSourceDirs = files(coverageSourceDirs)
    executionData = files('./build/jacoco/testDebug.exec')
}

dependencies {

    provided fileTree(dir: 'libs', include: ['*.jar']),

            'com.squareup:otto:1.3.5',
            'org.slf4j:slf4j-api:1.6.4',
            'org.slf4j:slf4j-log4j12:1.6.4',

            // Dagger
            'com.google.dagger:dagger:2.0',
            'org.glassfish:javax.annotation:10.0-b28'

    compile 'com.squareup:tape:1.2.2',
            'com.j256.ormlite:ormlite-android:4.47',
            'com.jakewharton:butterknife:1.4.0',
            'joda-time:joda-time:2.4',
            'org.joda:joda-convert:1.7',
            'de.mindpipe.android:android-logging-log4j:1.0.2',

            // Mockito Dependencies
            // Need to include it in build because our instrumentation tests have to be in 'main', not 'test', and not
            // 'androidTests'
            'com.google.dexmaker:dexmaker-mockito:1.0',
            'com.google.dexmaker:dexmaker:1.0',
            'org.mockito:mockito-core:1.10.17'

    // Dagger
    apt 'com.google.dagger:dagger-compiler:2.0'

    // Espresso
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.0')
    androidTestCompile('com.android.support.test:testing-support-lib:0.1')

    configurations {
        all*.exclude group: 'commons-codec', module: 'commons-codec'
        all*.exclude group: 'commons-logging', module: 'commons-logging'
    }
}
